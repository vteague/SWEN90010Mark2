           *******************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 27-MAY-2013 13:49:21.66

                        procedure Sort.FindMinIndex




For path(s) from start to run-time check associated with statement of line 70:

procedure_findminindex_1.
H1:    true .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
        ->
C1:    1 >= index__first .
C2:    1 <= index__last .
 

For path(s) from start to run-time check associated with statement of line 71:

procedure_findminindex_2.
H1:    true .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    1 >= index__first .
H4:    1 <= index__last .
        ->
C1:    1 >= index__first .
C2:    1 <= index__last .
 

For path(s) from start to assertion of line 74:

procedure_findminindex_3.
H1:    true .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    1 >= index__first .
H4:    1 <= index__last .
H5:    1 >= index__first .
H6:    1 <= index__last .
H7:    1 >= index__first .
H8:    1 <= index__last .
H9:    1 <> index__last - index__first + 1 .
        ->
C1:    min(a, 1, 1, 1) .
C2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
 

For path(s) from assertion of line 74 to assertion of line 74:

procedure_findminindex_4.
H1:    min(a, 1, j, minindex) .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    minindex >= index__first .
H4:    minindex <= index__last .
H5:    j >= index__first .
H6:    j <= index__last .
H7:    minindex >= index__first .
H8:    minindex <= index__last .
H9:    j >= index__first .
H10:   j <= index__last .
H11:   element(a, [j]) < element(a, [minindex]) .
H12:   j >= index__first .
H13:   j <= index__last .
H14:   j >= index__first .
H15:   j <= index__last .
H16:   j >= index__first .
H17:   j <= index__last .
H18:   j + 1 >= index__first .
H19:   j + 1 <= index__last .
H20:   j + 1 >= index__first .
H21:   j + 1 <= index__last .
H22:   j + 1 <> index__last - index__first + 1 .
        ->
C1:    min(a, 1, j + 1, j) .
C2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
 

procedure_findminindex_5.
H1:    min(a, 1, j, minindex) .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    minindex >= index__first .
H4:    minindex <= index__last .
H5:    j >= index__first .
H6:    j <= index__last .
H7:    minindex >= index__first .
H8:    minindex <= index__last .
H9:    j >= index__first .
H10:   j <= index__last .
H11:   not (element(a, [j]) < element(a, [minindex])) .
H12:   j >= index__first .
H13:   j <= index__last .
H14:   j + 1 >= index__first .
H15:   j + 1 <= index__last .
H16:   j + 1 >= index__first .
H17:   j + 1 <= index__last .
H18:   j + 1 <> index__last - index__first + 1 .
        ->
C1:    min(a, 1, j + 1, minindex) .
C2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
 

For path(s) from assertion of line 74 to run-time check associated with statement of line 75:

procedure_findminindex_6.
H1:    min(a, 1, j, minindex) .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    minindex >= index__first .
H4:    minindex <= index__last .
H5:    j >= index__first .
H6:    j <= index__last .
        ->
C1:    minindex >= index__first .
C2:    minindex <= index__last .
C3:    j >= index__first .
C4:    j <= index__last .
 

For path(s) from assertion of line 74 to run-time check associated with statement of line 76:

procedure_findminindex_7.
H1:    min(a, 1, j, minindex) .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    minindex >= index__first .
H4:    minindex <= index__last .
H5:    j >= index__first .
H6:    j <= index__last .
H7:    minindex >= index__first .
H8:    minindex <= index__last .
H9:    j >= index__first .
H10:   j <= index__last .
H11:   element(a, [j]) < element(a, [minindex]) .
H12:   j >= index__first .
H13:   j <= index__last .
        ->
C1:    j >= index__first .
C2:    j <= index__last .
 

For path(s) from assertion of line 74 to run-time check associated with statement of line 79:

procedure_findminindex_8.
H1:    min(a, 1, j, minindex) .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    minindex >= index__first .
H4:    minindex <= index__last .
H5:    j >= index__first .
H6:    j <= index__last .
H7:    minindex >= index__first .
H8:    minindex <= index__last .
H9:    j >= index__first .
H10:   j <= index__last .
H11:   element(a, [j]) < element(a, [minindex]) .
H12:   j >= index__first .
H13:   j <= index__last .
H14:   j >= index__first .
H15:   j <= index__last .
H16:   j >= index__first .
H17:   j <= index__last .
        ->
C1:    j + 1 >= index__first .
C2:    j + 1 <= index__last .
 

procedure_findminindex_9.
H1:    min(a, 1, j, minindex) .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    minindex >= index__first .
H4:    minindex <= index__last .
H5:    j >= index__first .
H6:    j <= index__last .
H7:    minindex >= index__first .
H8:    minindex <= index__last .
H9:    j >= index__first .
H10:   j <= index__last .
H11:   not (element(a, [j]) < element(a, [minindex])) .
H12:   j >= index__first .
H13:   j <= index__last .
        ->
C1:    j + 1 >= index__first .
C2:    j + 1 <= index__last .
 

For path(s) from start to finish:

procedure_findminindex_10.
H1:    true .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    1 >= index__first .
H4:    1 <= index__last .
H5:    1 >= index__first .
H6:    1 <= index__last .
H7:    1 >= index__first .
H8:    1 <= index__last .
H9:    not (1 <> index__last - index__first + 1) .
        ->
C1:    min(a, 1, index__last - index__first + 1, 1) .
 

For path(s) from assertion of line 74 to finish:

procedure_findminindex_11.
H1:    min(a, 1, j, minindex) .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    minindex >= index__first .
H4:    minindex <= index__last .
H5:    j >= index__first .
H6:    j <= index__last .
H7:    minindex >= index__first .
H8:    minindex <= index__last .
H9:    j >= index__first .
H10:   j <= index__last .
H11:   element(a, [j]) < element(a, [minindex]) .
H12:   j >= index__first .
H13:   j <= index__last .
H14:   j >= index__first .
H15:   j <= index__last .
H16:   j >= index__first .
H17:   j <= index__last .
H18:   j + 1 >= index__first .
H19:   j + 1 <= index__last .
H20:   j + 1 >= index__first .
H21:   j + 1 <= index__last .
H22:   not (j + 1 <> index__last - index__first + 1) .
        ->
C1:    min(a, 1, index__last - index__first + 1, j) .
 

procedure_findminindex_12.
H1:    min(a, 1, j, minindex) .
H2:    for_all(i___1: integer, ((i___1 >= index__first) and (
           i___1 <= index__last)) -> ((element(a, [i___1]) >= 
           integer__first) and (element(a, [i___1]) <= 
           integer__last))) .
H3:    minindex >= index__first .
H4:    minindex <= index__last .
H5:    j >= index__first .
H6:    j <= index__last .
H7:    minindex >= index__first .
H8:    minindex <= index__last .
H9:    j >= index__first .
H10:   j <= index__last .
H11:   not (element(a, [j]) < element(a, [minindex])) .
H12:   j >= index__first .
H13:   j <= index__last .
H14:   j + 1 >= index__first .
H15:   j + 1 <= index__last .
H16:   j + 1 >= index__first .
H17:   j + 1 <= index__last .
H18:   not (j + 1 <> index__last - index__first + 1) .
        ->
C1:    min(a, 1, index__last - index__first + 1, minindex) .
 

